import{_ as n,o as s,c as a,a as e}from"./app.66459213.js";const m='{"title":"Using a store outside of a component","description":"","frontmatter":{},"headers":[{"level":2,"title":"Single Page Applications","slug":"single-page-applications"},{"level":2,"title":"SSR Apps","slug":"ssr-apps"}],"relativePath":"core-concepts/outside-component-usage.md"}',t={},o=e(`<h1 id="using-a-store-outside-of-a-component" tabindex="-1">Using a store outside of a component <a class="header-anchor" href="#using-a-store-outside-of-a-component" aria-hidden="true">#</a></h1><p>React Mise stores rely on the <code>react-mise</code> instance to share the same store instance across all calls. Most of the time, this works out of the box by just calling your <code>useStore()</code> function. For example, in <code>component</code>, you don&#39;t need to do anything else. But things are a bit different outside of a component. Behind the scenes, <code>useStore()</code> <em>injects</em> the <code>react-mise</code> instance you gave to your <code>app</code>. This means that if the <code>react-mise</code> instance cannot be automatically injected, you have to manually provide it to the <code>useStore()</code> function. You can solve this differently depending on the kind of application you are writing.</p><h2 id="single-page-applications" tabindex="-1">Single Page Applications <a class="header-anchor" href="#single-page-applications" aria-hidden="true">#</a></h2><p>The easiest way to ensure this is always applied is to <em>defer</em> calls of <code>useStore()</code> by placing them inside functions that will always run after react-mise is installed.</p><p>Let&#39;s take a look at this example of using a store inside of a navigation guard with Vue Router:</p><div class="language-js"><pre><code><span class="token comment">// \u274C Depending on the order of imports this will fail</span>
<span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">useStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

router<span class="token punctuation">.</span><span class="token function">beforeEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span> from<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// we wanted to use the store here</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>store<span class="token punctuation">.</span>isLoggedIn<span class="token punctuation">)</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">else</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token string">&quot;/login&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// \u2705 This will work because the router starts with used</span>
<span class="token comment">// the router is installed and react-mise will be installed too</span>
<span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">useStore</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>
router<span class="token punctuation">.</span><span class="token function">beforeEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">to</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>to<span class="token punctuation">.</span>meta<span class="token punctuation">.</span>requiresAuth <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>store<span class="token punctuation">.</span>isLoggedIn<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token string">&quot;/login&quot;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><h2 id="ssr-apps" tabindex="-1">SSR Apps <a class="header-anchor" href="#ssr-apps" aria-hidden="true">#</a></h2><p>When dealing with Server Side Rendering, you will have to pass the <code>react-mise</code> instance to <code>useStore()</code>. This prevents react-mise from sharing global state between different application instances.</p>`,8),p=[o];function c(i,l,r,u,d,k){return s(),a("div",null,p)}var f=n(t,[["render",c]]);export{m as __pageData,f as default};
