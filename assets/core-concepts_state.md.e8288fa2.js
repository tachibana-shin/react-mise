import{_ as n,o as s,c as a,a as t}from"./app.66459213.js";const g='{"title":"State","description":"","frontmatter":{},"headers":[{"level":2,"title":"Accessing the state","slug":"accessing-the-state"},{"level":3,"title":"Usage with the Options API","slug":"usage-with-the-options-api"},{"level":2,"title":"Mutating the state","slug":"mutating-the-state"},{"level":2,"title":"Watch to the state","slug":"watch-to-the-state"}],"relativePath":"core-concepts/state.md"}',e={},o=t(`<h1 id="state" tabindex="-1">State <a class="header-anchor" href="#state" aria-hidden="true">#</a></h1><p>The state is, most of the time, the central part of your store. People often start by defining the state that represents their app. In React Mise the state is defined as a function that returns the initial state. This allows React Mise to work in both Server and Client Side.</p><div class="language-js"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> defineStore <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;react-mise&quot;</span>

<span class="token keyword">const</span> useStore <span class="token operator">=</span> <span class="token function">defineStore</span><span class="token punctuation">(</span><span class="token string">&quot;storeId&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token comment">// arrow function recommended for full type inference</span>
  <span class="token function-variable function">state</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      <span class="token comment">// all these properties will have their type inferred automatically</span>
      <span class="token literal-property property">counter</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
      <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;Eduardo&quot;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">isAdmin</span><span class="token operator">:</span> <span class="token boolean">true</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><h2 id="accessing-the-state" tabindex="-1">Accessing the <code>state</code> <a class="header-anchor" href="#accessing-the-state" aria-hidden="true">#</a></h2><p>By default, you can directly read and write to the state by accessing it through the <code>store</code> instance:</p><div class="language-js"><pre><code><span class="token keyword">const</span> <span class="token punctuation">[</span>store<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

store<span class="token punctuation">.</span>counter<span class="token operator">++</span>
</code></pre></div><h3 id="usage-with-the-options-api" tabindex="-1">Usage with the Options API <a class="header-anchor" href="#usage-with-the-options-api" aria-hidden="true">#</a></h3><p>For the following examples, you can assume the following store was created:</p><div class="language-js"><pre><code><span class="token comment">// Example File Path:</span>
<span class="token comment">// ./src/stores/counterStore.js</span>

<span class="token keyword">import</span> <span class="token punctuation">{</span> defineStore <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;react-mise&quot;</span>

<span class="token keyword">const</span> useCounterStore <span class="token operator">=</span> <span class="token function">defineStore</span><span class="token punctuation">(</span><span class="token string">&quot;counterStore&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token function-variable function">state</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">counter</span><span class="token operator">:</span> <span class="token number">0</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><h2 id="mutating-the-state" tabindex="-1">Mutating the state <a class="header-anchor" href="#mutating-the-state" aria-hidden="true">#</a></h2><p>Apart from directly mutating the store with <code>store.counter++</code>, you can also call the <code>Object.assign</code> method. It allows you to apply multiple changes at the same time with a partial <code>state</code> object:</p><div class="language-js"><pre><code>Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>store<span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">counter</span><span class="token operator">:</span> store<span class="token punctuation">.</span>counter <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>
  <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">120</span><span class="token punctuation">,</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;DIO&quot;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><h2 id="watch-to-the-state" tabindex="-1">Watch to the state <a class="header-anchor" href="#watch-to-the-state" aria-hidden="true">#</a></h2><p>You can watch the state and its changes through the <code>watch</code> method of a store, similar to Vue <a href="https://vuejs.org/guide/essentials/watchers.html" target="_blank" rel="noopener noreferrer">watch</a>.</p><div class="language-js"><pre><code><span class="token function">watchEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// persist the whole state to the local storage whenever it changes</span>
  localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">&quot;cart&quot;</span><span class="token punctuation">,</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>store<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>You can watch the whole state on the <code>react-mise</code> instance:</p><div class="language-js"><pre><code><span class="token function">watch</span><span class="token punctuation">(</span>
  store<span class="token punctuation">,</span>
  <span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// persist the whole state to the local storage whenever it changes</span>
    localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">&quot;react-miseState&quot;</span><span class="token punctuation">,</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> <span class="token literal-property property">deep</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span>
<span class="token punctuation">)</span>
</code></pre></div></div>`,16),p=[o];function c(r,l,i,u,k,h){return s(),a("div",null,p)}var m=n(e,[["render",c]]);export{g as __pageData,m as default};
